<?xml version="1.0"?>
<!-- 
    Note: As an alternative to hand editing this file you can use the 
    web admin tool to configure settings for your application. Use
    the Website->Asp.Net Configuration option in Visual Studio.
    A full list of settings and comments can be found in 
    machine.config.comments usually located in 
    \Windows\Microsoft.Net\Framework\v2.x\Config 
-->
<configuration>
	<appSettings>
		<add key="SalesTax" value="0.08"/>
	</appSettings>
	<connectionStrings>
		<add name="PPQ_DataConnectionString1" connectionString="Data Source=terrychen\sqlserver2005t;AttachDbFilename=|DataDirectory|\PPQ_Data.MDF;Integrated Security=True;User Instance=True" providerName="System.Data.SqlClient"/>
		<add name="PPQ_DataConnectionString" connectionString="Data Source=TERRYCHEN\SQLSERVER2005T;AttachDbFilename=D:\NetWorkShop\PPQWebSite\complete\App_Data\PPQ_Data.MDF;Integrated Security=True" providerName="System.Data.SqlClient"/>
	</connectionStrings>
	<system.web>
		<!--<siteMap defaultProvider="AspXmlSiteMapProvider" enabled="true">
      <providers>
        <clear/>
        <add name="AspXmlSiteMapProvider" type="System.Web.XmlSiteMapProvider, System.Web, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
          siteMapFile="web.sitemap" securityTrimmingEnabled="true"/>
      </providers>
    </siteMap>-->
		<!-- 
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
        -->
		<!--<roleManager enabled="true" />-->
		<!--<compilation debug="true"/>-->
		<!--
            The <authentication> section enables configuration 
            of the security authentication mode used by 
            ASP.NET to identify an incoming user. 
        -->
		<!--<authentication mode="Forms">
      <forms loginUrl="Login.aspx" />
    </authentication>-->
		<!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.

        <customErrors mode="RemoteOnly" defaultRedirect="GenericErrorPage.htm">
            <error statusCode="403" redirect="NoAccess.htm"/>
            <error statusCode="404" redirect="FileNotFound.htm"/>
        </customErrors>
        -->
		<profile enabled="true">
			<properties>
				<add name="DisplayName" type="System.String"/>
				<add name="Title" type="System.String"/>
				<add name="FirstName" type="System.String"/>
				<add name="LastName" type="System.String"/>
				<add name="Address" type="System.String"/>
				<add name="Town" type="System.String"/>
				<add name="County" type="System.String"/>
				<add name="PostCode" type="System.String"/>
				<add name="Country" type="System.String"/>
				<add name="Telephone" type="System.String"/>
				<add name="Subscribe" type="System.Boolean" defaultValue="true"/>
			</properties>
		</profile>
		<compilation debug="true"/></system.web>
	<location path="admin.aspx">
		<system.web>
			<authorization>
				<allow roles="Admin"/>
				<deny users="*"/>
			</authorization>
		</system.web>
	</location>
</configuration>
